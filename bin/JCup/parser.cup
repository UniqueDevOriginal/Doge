package JCup;
/* ------------------------------Declaração de bibliotecas---------------------------------- */
import java_cup.runtime.*;
import JCup.ParserTokens.*;

/* Identificar erro no parser, mostra linha e coluna do erro */
parser code {:
    /* Sobrescrever o método report_error para que ele exiba a linha e
        coluna de onde ocorreu o erro na entrada, bem como no
        razão para o erro que é passado para o método no
        String 'mensagem'.  */
    public void report_error(String message, Object info) {

        /* Crie um StringBuilder chamado 'm' com a string 'Erro' nele. */
        StringBuilder m = new StringBuilder("\033[0;31m"+"Error");

        /* Verifique se as informações passadas para o método são 
        do tipo java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declara um objeto java_cup.runtime.Symbol 's' com as
                informações  que está sendo convertida. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Verifica se a linha da entrada >= 0 */
            if (s.left >= 0) {
                /* Adiciona msg de erro na linha do erro da entrada. */
                m.append(" in line "+(s.left+1));
                /*  Verifica se a coluna da entrada >= 0 */
                if (s.right >= 0)
                    /* Adiciona msg de erro na coluna do erro da entrada. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Por fim adiciona a mensagem de erro na tela. */
        m.append(" : "+message);

        /* Imprime o conteudo de 'm' que contem a msg de erro, 
        com as informação de linha e coluna e a msg*/
        System.out.println(); 
        System.err.println(m+"\033[0m");
    }

    /* Sobrescrever report_fatal_error para exibit linha e coluna do erro 
       alem da mensagem do erro, e termina a execução. */
    public void report_fatal_error(String message, Object info) { 
        report_error(message, info);
        System.exit(1);
    }
:};

/* --------------------------Declaração de terminais e não-terminais------------------------ */
/* ----------Palavras Reservadas----------*/
terminal CHAR;
terminal INT;
terminal SHOW;
terminal IF;
terminal WHILE;
terminal RETURN;

/* ----------Operadores e pontuação---------*/
terminal String PLUS, MINUS, TIMES, DIVIDE;
terminal COMMA;
terminal LESS, GREATER;
terminal EQUALS, NOTEQUALS;
terminal EQUAL;

/* ----------Delimitadores--------*/
terminal LEFTPAREN, RIGHTPAREN;
terminal LEFTBRACE, RIGHTBRACE;
terminal SEMI;

/* ----------Tokens Com Valor--------*/
terminal String IDENT;
terminal String CHARACTER;
terminal Integer NUMBER;


/* ---------------------------------Não-terminais------------------------ */

non terminal Program Program;
non terminal Decl    Decl;
non terminal TypeId  TypeId; 
non terminal Id      Id;
non terminal VarDecl VarDecl;
non terminal Var     Var;
non terminal VarList  VarList;
non terminal Argument Argument;
non terminal Block Block; 
non terminal FunctionDecl FunctionDecl;
non terminal Stmt Stmt;
non terminal Expr Expr;
non terminal BlockStmt BlockStmt;
non terminal ReturnValue ReturnValue;
non terminal BinOp ; 
non terminal RelOp ;
non terminal EqOp ;
non terminal AssingOp AssingOp;
non terminal Literal Literal;  
non terminal ArithOp ArithOp; 
non terminal Call ;
non terminal Actuals ;

/* ---------------------------------Precedencia dos Terminais-------------------------------- */

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

start with Program;

/* -----------------------------------------Regras de Produção Gramatica Em EBNF--------------------------------------- */

Program     	 ::= Decl:d {: RESULT = new ProgramDecl(d); :};
Decl                ::= VarDecl:vd Decl:d {: RESULT = new DeclVarDecl(vd, d); :}
                        | FunctionDecl:fd Decl:d  {: RESULT = new DeclFunctionDecl(fd, d); :}
                        | /* empty */
                        ;
VarDecl           ::= Var:v SEMI {: RESULT = new VarDeclVar(v); :} 
                        | Var:v AssingOp:ao Literal:lt SEMI {: RESULT = new VarDeclAssingOp(v,ao,lt);:}
                        ;
Var                  ::= TypeId:ti Id:i {: RESULT = new VarTypeId(ti,i); :}
                        ;
TypeId             ::= INT:n {: RESULT = new INT(n); :}
                        | CHAR:c {: RESULT = new CHAR(c); :}
                        ;
Id                      ::= IDENT:id {: RESULT = new IDENT(id); :};
FunctionDecl       ::= TypeId:ti Id:id LEFTPAREN Argument:argt RIGHTPAREN Block:bl {: RESULT = new FuncDeclTypeArgBlock(ti, id,argt, bl);:};
Argument           ::= VarList:vl {: RESULT = new ArgumentVarList(vl);:}
                        | /* empty */
                        ;
VarList            ::= Var:v COMMA VarList:vl {: RESULT = new VarListVarList(v,vl); :}
                        | Var:v {: RESULT = new VarListVar(v); :}
                        ;
Block               ::= LEFTBRACE BlockStmt:blst RIGHTBRACE {: RESULT = new BlockStmtBlock(blst); :};
BlockStmt           ::= VarDecl:vd BlockStmt:blst {: RESULT = new BlockStmtVarDecl(vd, blst); :}
                        | Stmt:st BlockStmt:blst {: RESULT = new BlockStmtStmt(st, blst); :}
                        | /* empty */
                        ;
Stmt                ::= Expr
                        | IF LEFTPAREN Expr RIGHTPAREN Block 
                        | WHILE LEFTPAREN Expr RIGHTPAREN Block 
                        | Id EQUAL Literal SEMI
                        | Id EQUAL Expr SEMI
                        | SHOW LEFTPAREN Id RIGHTPAREN SEMI
                        | Call
                        | RETURN ReturnValue:rv SEMI {: RESULT = new StmtReturnValue(rv); :}
                        ;
ReturnValue         ::= Expr:ex {: RESULT = new ReturnValueExpr(ex);:} 
                        | Id:id {: RESULT = new ReturnValueId(id); :} 
                        | /* empty */
                        ;
Call                ::= Id LEFTPAREN Actuals RIGHTPAREN SEMI;
Actuals             ::= Literal COMMA Actuals 
                        | Expr COMMA Actuals 
                        | Expr 
                        | /* empty */
                        ;
Expr                ::= NUMBER BinOp NUMBER
                        | Id BinOp Id
                        | Id ArithOp Id 
                        | NUMBER BinOp Id 
                        | Id BinOp NUMBER 
                        | Literal:lt ArithOp:aro Literal:lt2 {: RESULT = new ExprNumberArithOp(lt ,aro,lt2);:}
                        ;
Literal             ::= NUMBER:nb {: RESULT = new NUMBER(nb); :}
                        |  CHARACTER:ct  {: RESULT = new CHARACTER(ct); :}
                        ;
ArithOp           ::= PLUS:plu {: RESULT = new PLUS(plu);:} 
                        | MINUS:min {: RESULT = new MINUS(min);:}
                        | TIMES:tim {: RESULT = new TIMES(tim);:}
                        | DIVIDE:div {: RESULT = new DIVIDE(div);:}
                        ;
AssingOp            ::= EQUAL:eq {: RESULT = new EQUAL(eq); :};
BinOp               ::= RelOp 
                        | EqOp
                        ;    
RelOp               ::= LESS 
                        | GREATER
                        ;
EqOp                ::= EQUALS 
                        | NOTEQUALS
                        ;
