package JCup;
/* ------------------------------Declaração de bibliotecas---------------------------------- */
import java_cup.runtime.*;
import JCup.ParserTokens.*;

/* Identificar erro no parser, mostra linha e coluna do erro */
parser code {:
    /* Sobrescrever o método report_error para que ele exiba a linha e
        coluna de onde ocorreu o erro na entrada, bem como no
        razão para o erro que é passado para o método no
        String 'mensagem'.  */
    public void report_error(String message, Object info) {

        /* Crie um StringBuilder chamado 'm' com a string 'Erro' nele. */
        StringBuilder m = new StringBuilder("Error");

        /* Verifique se as informações passadas para o método são 
        do tipo java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declara um objeto java_cup.runtime.Symbol 's' com as
                informações  que está sendo convertida. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Verifica se a linha da entrada >= 0 */
            if (s.left >= 0) {
                /* Adiciona msg de erro na linha do erro da entrada. */
                m.append(" in line "+(s.left+1));
                /*  Verifica se a coluna da entrada >= 0 */
                if (s.right >= 0)
                    /* Adiciona msg de erro na coluna do erro da entrada. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Por fim adiciona a mensagem de erro na tela. */
        m.append(" : "+message);

        /* Imprime o conteudo de 'm' que contem a msg de erro, 
        com as informação de linha e coluna e a msg*/
        System.err.println(m);
    }

    /* Sobrescrever report_fatal_error para exibit linha e coluna do erro 
       alem da mensagem do erro, e termina a execução. */
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* --------------------------Declaração de terminais e não-terminais------------------------ */
/* ----------Palavras Reservadas----------*/
terminal CHAR;
terminal INT;
terminal VOID;
terminal SHOW;
terminal IF;
terminal WHILE;
terminal RETURN;

/* ----------Operadores e pontuação---------*/
terminal PLUS, MINUS, TIMES, DIVIDE;
terminal COMMA;
terminal LESS, GREATER;
terminal EQUALS, NOTEQUALS;
terminal EQUAL;

/* ----------Delimitadores--------*/
terminal LEFTPAREN, RIGHTPAREN;
terminal LEFTBRACE, RIGHTBRACE;
terminal SEMI;

/* ----------Tokens Com Valor--------*/
terminal char     IDENT;
terminal Interger NUMBER;
terminal Char     CHARACTER;

/* ---------------------------------Não-terminais------------------------ */

non terminal Program Program;
non terminal Decl Decl;
non terminal TypeId TypeId; 
non terminal Id Id;
non terminal VarDecl VarDecl;
non terminal Var Var;
non terminal VarList ;
non terminal Argument ;
non terminal Block ; 
non terminal FunctionDecl ;
non terminal Stmt ;
non terminal Expr ;
non terminal BlockStmt ;
non terminal ReturnValue ;
non terminal BinOp ; 
non terminal RelOp ;
non terminal EqOp ;
non terminal AssingOp ;
non terminal Literal ;  
non terminal ArithOp ; 
non terminal Call ;
non terminal Actuals ;

/* ---------------------------------Precedencia dos Terminais-------------------------------- */

precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;

/* -----------------------------------------Regras de Produção Gramatica Em EBNF--------------------------------------- */

Program     	    ::= Decl:d {: RESULT = new Program(d); :};
Decl                ::= VarDecl Decl 
                        | FunctionDecl Decl 
                        | /* empty */
                        ;
VarDecl             ::= Var:v SEMI {: RESULT = new  :}
                        | Var AssingOp Literal SEMI
                        ;
Var                 ::= TypeId Id;
VarList             ::= Var COMMA VarList 
                        | Var
                        ;
TypeId              ::= INT 
                        | CHAR
                        ;
Id                  ::= IDENT;
FunctionDecl        ::= TypeId Id LEFTPAREN Argument RIGHTPAREN Block
                        | VOID Id LEFTPAREN Argument RIGHTPAREN Block
                        ;
Argument            ::= VarList 
                        | /* empty */
                        ;
Block               ::= LEFTBRACE BlockStmt RIGHTBRACE;
BlockStmt           ::= VarDecl BlockStmt 
                        | Stmt BlockStmt 
                        | /* empty */
                        ;
Stmt                ::= IF LEFTPAREN Expr RIGHTPAREN Block 
                        | WHILE LEFTPAREN Expr RIGHTPAREN Block 
                        | Id AssingOp Literal SEMI
                        | SHOW LEFTPAREN Id RIGHTPAREN SEMI
                        | Call
                        | RETURN ReturnValue SEMI
                        ;
ReturnValue         ::= Expr 
                        | Id 
                        | Literal 
                        | /* empty */
                        ;
Call                ::= Id LEFTPAREN Actuals RIGHTPAREN SEMI;
Actuals             ::= Literal 
                        | Literal COMMA Actuals 
                        | Expr COMMA Actuals 
                        | Expr 
                        | /* empty */
                        ;
Expr                ::= NUMBER BinOp NUMBER 
                        | Id BinOp Id 
                        | NUMBER BinOp Id 
                        | Id BinOp NUMBER 
                        | NUMBER ArithOp NUMBER
                        ;
Literal             ::= NUMBER 
                        | CHARACTER
                        ;
ArithOp             ::= PLUS 
                        | MINUS 
                        | TIMES 
                        | DIVIDE
                        ;
AssingOp            ::= EQUAL;
BinOp               ::= RelOp 
                        | EqOp
                        ;    
RelOp               ::= LESS 
                        | GREATER
                        ;
EqOp                ::= EQUALS 
                        | NOTEQUALS
                        ;
