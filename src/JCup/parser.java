
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package JCup;

import java_cup.runtime.*;
import JCup.ParserTokens.*;
import JCup.AuxStruct.AuxArray;
import java.io.IOException;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\071\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\002\000\002\006\004" +
    "\000\002\006\006\000\002\007\004\000\002\004\003\000" +
    "\002\004\003\000\002\005\003\000\002\030\002\000\002" +
    "\013\011\000\002\011\003\000\002\011\002\000\002\010" +
    "\005\000\002\010\003\000\002\012\005\000\002\016\004" +
    "\000\002\016\004\000\002\016\002\000\002\014\003\000" +
    "\002\014\007\000\002\014\007\000\002\014\006\000\002" +
    "\014\006\000\002\014\007\000\002\014\003\000\002\014" +
    "\005\000\002\017\003\000\002\017\003\000\002\017\002" +
    "\000\002\031\002\000\002\026\010\000\002\027\005\000" +
    "\002\027\005\000\002\027\003\000\002\027\002\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\005\000\002\024\003" +
    "\000\002\024\003\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\023\003\000\002" +
    "\020\003\000\002\020\003\000\002\021\003\000\002\021" +
    "\003\000\002\022\003\000\002\022\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\010\002\ufffd\004\010\005\013\001\002\000" +
    "\004\002\147\001\002\000\004\031\026\001\002\000\010" +
    "\002\ufffd\004\010\005\013\001\002\000\010\002\ufffd\004" +
    "\010\005\013\001\002\000\004\031\ufff8\001\002\000\004" +
    "\002\000\001\002\000\006\023\014\030\015\001\002\000" +
    "\004\031\ufff9\001\002\000\006\032\uffcf\033\uffcf\001\002" +
    "\000\030\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010" +
    "\ufffc\011\ufffc\027\ufffc\031\ufffc\032\ufffc\033\ufffc\001\002" +
    "\000\006\032\021\033\020\001\002\000\004\030\022\001" +
    "\002\000\034\004\uffd5\005\uffd5\006\uffd5\007\uffd5\010\uffd5" +
    "\011\uffd5\016\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032" +
    "\uffd5\033\uffd5\001\002\000\044\004\uffd4\005\uffd4\006\uffd4" +
    "\007\uffd4\010\uffd4\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015" +
    "\uffd4\016\uffd4\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4" +
    "\033\uffd4\001\002\000\030\002\ufffb\004\ufffb\005\ufffb\006" +
    "\ufffb\007\ufffb\010\ufffb\011\ufffb\027\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\001\002\000\004\002\ufffe\001\002\000\004\002" +
    "\uffff\001\002\000\012\016\ufffa\023\ufffa\025\ufffa\030\ufffa" +
    "\001\002\000\010\023\ufff7\024\ufff6\030\ufff7\001\002\000" +
    "\004\024\030\001\002\000\010\004\010\005\013\025\ufff3" +
    "\001\002\000\004\031\043\001\002\000\004\025\037\001" +
    "\002\000\004\025\ufff4\001\002\000\006\016\035\025\ufff1" +
    "\001\002\000\006\004\010\005\013\001\002\000\004\025" +
    "\ufff2\001\002\000\004\026\040\001\002\000\026\004\010" +
    "\005\013\006\046\007\050\010\045\011\047\027\uffed\031" +
    "\043\032\021\033\053\001\002\000\010\002\ufff5\004\ufff5" +
    "\005\ufff5\001\002\000\026\004\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\027\uffe6\031\uffe6\032\uffe6\033\uffe6" +
    "\001\002\000\060\004\ufff7\005\ufff7\006\ufff7\007\ufff7\010" +
    "\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\016\ufff7" +
    "\017\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7\001\002" +
    "\000\026\004\010\005\013\006\046\007\050\010\045\011" +
    "\047\027\uffed\031\043\032\021\033\053\001\002\000\004" +
    "\024\142\001\002\000\004\024\136\001\002\000\012\030" +
    "\uffe2\031\043\032\021\033\053\001\002\000\004\024\126" +
    "\001\002\000\026\004\uffec\005\uffec\006\uffec\007\uffec\010" +
    "\uffec\011\uffec\027\uffec\031\uffec\032\uffec\033\uffec\001\002" +
    "\000\026\004\010\005\013\006\046\007\050\010\045\011" +
    "\047\027\uffed\031\043\032\021\033\053\001\002\000\026" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017\076\020" +
    "\072\021\077\022\070\030\uffd5\001\002\000\026\012\057" +
    "\013\061\014\063\015\062\017\076\020\072\021\077\022" +
    "\070\023\073\024\uffe1\001\002\000\004\027\065\001\002" +
    "\000\012\012\057\013\061\014\063\015\062\001\002\000" +
    "\010\031\uffd3\032\uffd3\033\uffd3\001\002\000\006\032\021" +
    "\033\020\001\002\000\010\031\uffd2\032\uffd2\033\uffd2\001" +
    "\002\000\010\031\uffd0\032\uffd0\033\uffd0\001\002\000\010" +
    "\031\uffd1\032\uffd1\033\uffd1\001\002\000\034\004\uffd6\005" +
    "\uffd6\006\uffd6\007\uffd6\010\uffd6\011\uffd6\016\uffd6\025\uffd6" +
    "\027\uffd6\030\uffd6\031\uffd6\032\uffd6\033\uffd6\001\002\000" +
    "\030\002\ufff0\004\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0" +
    "\011\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\001\002\000" +
    "\004\031\043\001\002\000\006\031\uffcd\033\uffcd\001\002" +
    "\000\006\031\uffc9\033\uffc9\001\002\000\004\024\107\001" +
    "\002\000\006\031\uffcb\033\uffcb\001\002\000\010\031\043" +
    "\032\021\033\053\001\002\000\006\031\043\033\101\001" +
    "\002\000\006\031\uffce\033\uffce\001\002\000\006\031\uffcc" +
    "\033\uffcc\001\002\000\006\031\uffca\033\uffca\001\002\000" +
    "\034\004\uffda\005\uffda\006\uffda\007\uffda\010\uffda\011\uffda" +
    "\016\uffda\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\001\002\000\034\004\uffd7\005\uffd7\006\uffd7\007\uffd7" +
    "\010\uffd7\011\uffd7\016\uffd7\025\uffd7\027\uffd7\030\uffd7\031" +
    "\uffd7\032\uffd7\033\uffd7\001\002\000\022\012\057\013\061" +
    "\014\063\015\062\017\076\020\072\021\077\022\070\001" +
    "\002\000\014\012\057\013\061\014\063\015\062\030\106" +
    "\001\002\000\004\030\105\001\002\000\026\004\uffe8\005" +
    "\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8\027\uffe8\031\uffe8" +
    "\032\uffe8\033\uffe8\001\002\000\026\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\011\uffe9\027\uffe9\031\uffe9\032\uffe9" +
    "\033\uffe9\001\002\000\012\025\uffdc\031\043\032\021\033" +
    "\053\001\002\000\004\025\117\001\002\000\014\012\057" +
    "\013\061\014\063\015\062\016\115\001\002\000\006\016" +
    "\113\025\uffdd\001\002\000\012\025\uffdc\031\043\032\021" +
    "\033\053\001\002\000\004\025\uffde\001\002\000\012\025" +
    "\uffdc\031\043\032\021\033\053\001\002\000\004\025\uffdf" +
    "\001\002\000\004\030\120\001\002\000\026\004\uffe0\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\027\uffe0\031\uffe0" +
    "\032\uffe0\033\uffe0\001\002\000\034\004\uffd9\005\uffd9\006" +
    "\uffd9\007\uffd9\010\uffd9\011\uffd9\016\uffd9\025\uffd9\027\uffd9" +
    "\030\uffd9\031\uffd9\032\uffd9\033\uffd9\001\002\000\006\031" +
    "\043\033\124\001\002\000\034\004\uffd8\005\uffd8\006\uffd8" +
    "\007\uffd8\010\uffd8\011\uffd8\016\uffd8\025\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\001\002\000\034\004\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\016\uffdb\025" +
    "\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\001\002" +
    "\000\004\027\uffef\001\002\000\010\031\043\032\021\033" +
    "\053\001\002\000\004\025\130\001\002\000\004\026\040" +
    "\001\002\000\026\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\027\uffeb\031\uffeb\032\uffeb\033\uffeb\001\002" +
    "\000\024\012\057\013\061\014\063\015\062\017\076\020" +
    "\072\021\077\022\070\030\uffe3\001\002\000\004\030\uffe4" +
    "\001\002\000\004\030\135\001\002\000\026\004\uffe5\005" +
    "\uffe5\006\uffe5\007\uffe5\010\uffe5\011\uffe5\027\uffe5\031\uffe5" +
    "\032\uffe5\033\uffe5\001\002\000\004\031\043\001\002\000" +
    "\004\025\140\001\002\000\004\030\141\001\002\000\026" +
    "\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\027" +
    "\uffe7\031\uffe7\032\uffe7\033\uffe7\001\002\000\010\031\043" +
    "\032\021\033\053\001\002\000\004\025\144\001\002\000" +
    "\004\026\040\001\002\000\026\004\uffea\005\uffea\006\uffea" +
    "\007\uffea\010\uffea\011\uffea\027\uffea\031\uffea\032\uffea\033" +
    "\uffea\001\002\000\004\027\uffee\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\016\002\003\003\010\004\004\006\005\007" +
    "\011\013\006\001\001\000\002\001\001\000\004\005\024" +
    "\001\001\000\014\003\023\004\004\006\005\007\011\013" +
    "\006\001\001\000\014\003\022\004\004\006\005\007\011" +
    "\013\006\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\015\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\030\026\001\001\000\002\001\001\000\012\004\030" +
    "\007\033\010\032\011\031\001\001\000\004\005\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\004\030\007\033\010\035\001\001\000\002\001" +
    "\001\000\004\012\040\001\001\000\024\004\030\005\053" +
    "\006\051\007\011\014\043\015\050\016\054\024\055\026" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\004\030\005\053\006\051\007\011\014" +
    "\043\015\050\016\145\024\055\026\041\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\131\015\132\017" +
    "\133\024\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\004\030\005\053\006\051\007\011\014\043\015" +
    "\050\016\124\024\055\026\041\001\001\000\010\020\121" +
    "\021\074\022\066\001\001\000\014\020\073\021\074\022" +
    "\066\025\065\031\070\001\001\000\002\001\001\000\004" +
    "\025\057\001\001\000\002\001\001\000\004\024\063\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\120\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\101\015\103\024\102\001" +
    "\001\000\004\005\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\020\073\021\074\022\066\025\065\001\001" +
    "\000\004\025\057\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\101\015\111\024\110" +
    "\027\107\001\001\000\002\001\001\000\004\025\057\001" +
    "\001\000\002\001\001\000\012\005\101\015\111\024\110" +
    "\027\113\001\001\000\002\001\001\000\012\005\101\015" +
    "\111\024\110\027\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\122\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\101\015\126\024\055\001\001\000" +
    "\002\001\001\000\004\012\130\001\001\000\002\001\001" +
    "\000\012\020\073\021\074\022\066\025\065\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\101\015\142\024\055\001\001" +
    "\000\002\001\001\000\004\012\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    AuxArray aux =  new AuxArray();
    private String type_coming = "";
    private boolean id_need_to_exist = false;
    private String temp_id = "";

    void wrong_type(String type) throws IOException{
        java_cup.runtime.Symbol s = (java_cup.runtime.Symbol)stack.peek();
        if (type.equals("INT")){
            if (type_coming != "INT"){
               throw new java.io.IOException("\033[0;31m"+"Wrong type "+"< "+(s.value)+" >"+" in line "+(s.left+1)+" on column "+(s.right+1)+" \033[0m"); 
            }   
        }
        else if (type.equals("CHAR")){
            if (type_coming != "CHAR"){
               throw new java.io.IOException("\033[0;31m"+"Wrong type "+"< "+(s.value)+" >"+" in line "+(s.left+1)+" on column "+(s.right+1)+" \033[0m"); 
            }   
        }
        type_coming = "";
    }

    void duplicate_var(String id) throws IOException{
        java_cup.runtime.Symbol s = (java_cup.runtime.Symbol)stack.peek();
        for (String newid : aux.nodes_var) {
        if(newid.equals(id)){
            System.out.println();
            throw new java.io.IOException("\033[0;31m"+"Duplicate Var "+"< "+(s.value)+" >"+" in line "+(s.left+1)+" on column "+(s.right+1)+" \033[0m"); 
        }
      }
      aux.nodes_var.add(id);
    }

    void duplicate_function(String id) throws IOException{
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)stack.peek());
        System.out.println(s.value);
        for (String newid : aux.nodes_function) {
        if(newid.equals(id)){
            System.out.println();
            throw new java.io.IOException("\033[0;31m"+"Duplicate Function "+"< "+(s.value)+" >"+" in line "+(s.left+1)+" on column "+(s.right+1)+" \033[0m"); 
        }
      }
      aux.nodes_function.add(id);
    }

    void function_id_exist(String id) throws IOException{
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)stack.peek());
        boolean exist = false;
        for (String newid : aux.nodes_function) {
        if(newid.equals(id)){
           exist = true;
            }
        }
        if (!exist){
            throw new java.io.IOException("\033[0;31m"+ " Function " + "< " + id + " >" + " isn't declared" + "in line "+(s.left+1)+" on column "+(s.right+1)+" \033[0m");
        }
        id_need_to_exist = false;
    }

    void var_id_exist(String id) throws IOException{
        java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol)stack.peek());
        boolean exist = false;
        for (String newid : aux.nodes_var) {
        if(newid.equals(id)){
           exist = true;
            }
        }
        if (!exist){
            throw new java.io.IOException("\033[0;31m"+ " Variable " + "< " + id + " >" + " isn't declared" + "in line "+(s.left+1)+" on column "+(s.right+1)+" \033[0m");
        }
        id_need_to_exist = false;
    }

    /* Sobrescrever o método report_error para que ele exiba a linha e
        coluna de onde ocorreu o erro na entrada, bem como no
        razão para o erro que é passado para o método no
        String 'mensagem'.  */
    public void report_error(String message, Object info) {

        /* Crie um StringBuilder chamado 'm' com a string 'Erro' nele. */
        System.out.println();
        StringBuilder m = new StringBuilder("\033[0;31m");

        m.append(message);
        /* Verifique se as informações passadas para o método são 
        do tipo java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declara um objeto java_cup.runtime.Symbol 's' com as
                informações  que está sendo convertida. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            /* Verifica se a linha da entrada >= 0 */
            if (s.left >= 0) {
                /* Adiciona msg de erro na linha do erro da entrada. */
                m.append(" in line "+(s.left+1));
                /*  Verifica se a coluna da entrada >= 0 */
                if (s.right >= 0)
                    /* Adiciona msg de erro na coluna do erro da entrada. */
                    m.append(", column "+(s.right+1));
            }
        }
        /* Imprime o conteudo de 'm' que contem a msg de erro, 
        com as informação de linha e coluna e a msg*/
        System.err.println(m+"\033[0m");
    }
    /* Sobrescrever report_fatal_error para exibit linha e coluna do erro 
       alem da mensagem do erro, e termina a execução. */
    public void report_fatal_error(String message, Object info) { 
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= Decl 
            {
              Program RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ProgramDecl(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decl ::= VarDecl Decl 
            {
              Decl RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclVarDecl(vd, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decl ::= FunctionDecl Decl 
            {
              Decl RESULT =null;
		int fdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionDecl fd = (FunctionDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclFunctionDecl(fd, d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Decl ::= 
            {
              Decl RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // VarDecl ::= Var SEMI 
            {
              VarDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Var AssingOp Literal SEMI 
            {
              VarDecl RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AssingOp ao = (AssingOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Literal lt = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDeclAssingOp(v,ao,lt);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Var ::= TypeId Id 
            {
              Var RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeId ti = (TypeId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarTypeId(ti,i); duplicate_var(temp_id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Var",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // TypeId ::= INT 
            {
              TypeId RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new INT(n); type_coming = "INT";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeId",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TypeId ::= CHAR 
            {
              TypeId RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CHAR(c); type_coming = "CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeId",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Id ::= IDENT 
            {
              Id RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 /*RESULT = new IDENT(id);*/temp_id = id;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Id",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              FunctionDecl RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeId ti = (TypeId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 duplicate_function(id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // FunctionDecl ::= TypeId IDENT NT$0 LEFTPAREN Argument RIGHTPAREN Block 
            {
              FunctionDecl RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (FunctionDecl) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		TypeId ti = (TypeId)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int argtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int argtright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Argument argt = (Argument)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int blleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Block bl = (Block)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FuncDeclTypeArgBlock(ti,argt, bl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunctionDecl",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Argument ::= VarList 
            {
              Argument RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ArgumentVarList(vl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Argument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Argument ::= 
            {
              Argument RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Argument",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarList ::= Var COMMA VarList 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VarList vl = (VarList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListVarList(v,vl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // VarList ::= Var 
            {
              VarList RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Var v = (Var)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarListVar(v); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Block ::= LEFTBRACE BlockStmt RIGHTBRACE 
            {
              Block RESULT =null;
		int blstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BlockStmt blst = (BlockStmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BlockStmtBlock(blst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Block",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BlockStmt ::= VarDecl BlockStmt 
            {
              BlockStmt RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDecl vd = (VarDecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockStmt blst = (BlockStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockStmtVarDecl(vd, blst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BlockStmt ::= Stmt BlockStmt 
            {
              BlockStmt RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Stmt st = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int blstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int blstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BlockStmt blst = (BlockStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BlockStmtStmt(st, blst); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BlockStmt ::= 
            {
              BlockStmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BlockStmt",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Stmt ::= Expr 
            {
              Stmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Stmt ::= IF LEFTPAREN Expr RIGHTPAREN Block 
            {
              Stmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Stmt ::= WHILE LEFTPAREN Expr RIGHTPAREN Block 
            {
              Stmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Stmt ::= Id EQUAL Literal SEMI 
            {
              Stmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Stmt ::= Id EQUAL Expr SEMI 
            {
              Stmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Stmt ::= SHOW LEFTPAREN Id RIGHTPAREN SEMI 
            {
              Stmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Stmt ::= Call 
            {
              Stmt RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Stmt ::= RETURN ReturnValue SEMI 
            {
              Stmt RESULT =null;
		int rvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReturnValue rv = (ReturnValue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StmtReturnValue(rv); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ReturnValue ::= Expr 
            {
              ReturnValue RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr ex = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnValueExpr(ex);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ReturnValue ::= Id 
            {
              ReturnValue RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Id i = (Id)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ReturnValueId(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ReturnValue ::= 
            {
              ReturnValue RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReturnValue",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$1 ::= 
            {
              Object RESULT =null;
 function_id_exist(temp_id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Call ::= Id NT$1 LEFTPAREN Actuals RIGHTPAREN SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Call",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Actuals ::= Literal COMMA Actuals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Actuals ::= Expr COMMA Actuals 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Actuals ::= Expr 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Actuals ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Actuals",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expr ::= NUMBER BinOp NUMBER 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expr ::= Id BinOp Id 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expr ::= Id ArithOp Id 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expr ::= NUMBER BinOp Id 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expr ::= Id BinOp NUMBER 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Expr ::= Literal ArithOp Literal 
            {
              Expr RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Literal lt = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aroleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aroright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArithOp aro = (ArithOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lt2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lt2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Literal lt2 = (Literal)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ExprNumberArithOp(lt ,aro,lt2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Literal ::= NUMBER 
            {
              Literal RESULT =null;
		int nbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer nb = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NUMBER(nb);wrong_type("INT");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Literal ::= CHARACTER 
            {
              Literal RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ct = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CHARACTER(ct);wrong_type("CHAR");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Literal",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ArithOp ::= PLUS 
            {
              ArithOp RESULT =null;
		int pluleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pluright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String plu = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PLUS(plu);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ArithOp ::= MINUS 
            {
              ArithOp RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int minright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String min = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new MINUS(min);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ArithOp ::= TIMES 
            {
              ArithOp RESULT =null;
		int timleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String tim = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new TIMES(tim);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ArithOp ::= DIVIDE 
            {
              ArithOp RESULT =null;
		int divleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int divright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String div = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DIVIDE(div);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ArithOp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // AssingOp ::= EQUAL 
            {
              AssingOp RESULT =null;
		int eqleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eqright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object eq = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new EQUAL(eq); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssingOp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BinOp ::= RelOp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BinOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BinOp ::= EqOp 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("BinOp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // RelOp ::= LESS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RelOp ::= GREATER 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("RelOp",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EqOp ::= EQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqOp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EqOp ::= NOTEQUALS 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EqOp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
